//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TokenService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimData", Namespace="http://schemas.datacontract.org/2004/07/MetierPM")]
    public partial class ClaimData : object
    {
        
        private string TypeField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimsPrincipalData", Namespace="http://schemas.datacontract.org/2004/07/MetierPM")]
    public partial class ClaimsPrincipalData : object
    {
        
        private TokenService.ClaimData[] ClaimsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TokenService.ClaimData[] Claims
        {
            get
            {
                return this.ClaimsField;
            }
            set
            {
                this.ClaimsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TokenService.ITokenService")]
    public interface ITokenService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GenerateAccessToken", ReplyAction="http://tempuri.org/ITokenService/GenerateAccessTokenResponse")]
        string GenerateAccessToken(TokenService.ClaimData[] claims);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GenerateAccessToken", ReplyAction="http://tempuri.org/ITokenService/GenerateAccessTokenResponse")]
        System.Threading.Tasks.Task<string> GenerateAccessTokenAsync(TokenService.ClaimData[] claims);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GenerateRefreshToken", ReplyAction="http://tempuri.org/ITokenService/GenerateRefreshTokenResponse")]
        string GenerateRefreshToken();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GenerateRefreshToken", ReplyAction="http://tempuri.org/ITokenService/GenerateRefreshTokenResponse")]
        System.Threading.Tasks.Task<string> GenerateRefreshTokenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GetPrincipalFromExpiredToken", ReplyAction="http://tempuri.org/ITokenService/GetPrincipalFromExpiredTokenResponse")]
        TokenService.ClaimsPrincipalData GetPrincipalFromExpiredToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GetPrincipalFromExpiredToken", ReplyAction="http://tempuri.org/ITokenService/GetPrincipalFromExpiredTokenResponse")]
        System.Threading.Tasks.Task<TokenService.ClaimsPrincipalData> GetPrincipalFromExpiredTokenAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ITokenServiceChannel : TokenService.ITokenService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class TokenServiceClient : System.ServiceModel.ClientBase<TokenService.ITokenService>, TokenService.ITokenService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TokenServiceClient() : 
                base(TokenServiceClient.GetDefaultBinding(), TokenServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITokenService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TokenServiceClient.GetBindingForEndpoint(endpointConfiguration), TokenServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TokenServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TokenServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GenerateAccessToken(TokenService.ClaimData[] claims)
        {
            return base.Channel.GenerateAccessToken(claims);
        }
        
        public System.Threading.Tasks.Task<string> GenerateAccessTokenAsync(TokenService.ClaimData[] claims)
        {
            return base.Channel.GenerateAccessTokenAsync(claims);
        }
        
        public string GenerateRefreshToken()
        {
            return base.Channel.GenerateRefreshToken();
        }
        
        public System.Threading.Tasks.Task<string> GenerateRefreshTokenAsync()
        {
            return base.Channel.GenerateRefreshTokenAsync();
        }
        
        public TokenService.ClaimsPrincipalData GetPrincipalFromExpiredToken(string token)
        {
            return base.Channel.GetPrincipalFromExpiredToken(token);
        }
        
        public System.Threading.Tasks.Task<TokenService.ClaimsPrincipalData> GetPrincipalFromExpiredTokenAsync(string token)
        {
            return base.Channel.GetPrincipalFromExpiredTokenAsync(token);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITokenService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITokenService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:57401/TokenService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TokenServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITokenService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TokenServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITokenService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ITokenService,
        }
    }
}
